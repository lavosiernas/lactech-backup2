// =====================================================
// CORRE√á√ÉO DE OPERA√á√ïES DE BANCO DE DADOS NO FRONT-END
// =====================================================

// 1. CORRE√á√ÉO PARA TABELA ANIMALS
function fixAnimalInsert(animalData, user) {
    console.log('üîß Corrigindo opera√ß√£o INSERT para animals...');
    
    return {
        farm_id: animalData.farm_id,
        user_id: user.id,  // ‚úÖ ADICIONAR user_id
        name: animalData.name || null,
        breed: animalData.breed || null,
        birth_date: animalData.birth_date || null,
        weight: animalData.weight || null,
        health_status: animalData.health_status || 'healthy',
        is_active: true
        // ‚ùå REMOVIDO: identification, animal_type, notes
    };
}

// 2. CORRE√á√ÉO PARA TABELA ANIMAL_HEALTH_RECORDS
function fixAnimalHealthRecordInsert(recordData, user) {
    console.log('üîß Corrigindo opera√ß√£o INSERT para animal_health_records...');
    
    return {
        farm_id: recordData.farm_id,
        animal_id: recordData.animal_id,  // ‚úÖ ADICIONAR animal_id
        user_id: user.id,  // ‚úÖ CORRIGIR: veterinarian_id ‚Üí user_id
        record_date: recordData.record_date,
        health_status: recordData.health_status || 'healthy',  // ‚úÖ ADICIONAR
        weight: recordData.weight || null,  // ‚úÖ ADICIONAR
        temperature: recordData.temperature || null,  // ‚úÖ ADICIONAR
        observations: recordData.observations || recordData.notes || null  // ‚úÖ CORRIGIR: notes ‚Üí observations
        // ‚ùå REMOVIDO: diagnosis, symptoms, severity, status
    };
}

// 3. CORRE√á√ÉO PARA TABELA FINANCIAL_RECORDS
function fixFinancialRecordInsert(recordData, user) {
    console.log('üîß Corrigindo opera√ß√£o INSERT para financial_records...');
    
    return {
        farm_id: recordData.farm_id,
        user_id: user.id,  // ‚úÖ ADICIONAR user_id
        record_date: recordData.date || recordData.record_date,  // ‚úÖ CORRIGIR: date ‚Üí record_date
        type: recordData.type,
        amount: recordData.amount,
        description: recordData.description,
        category: recordData.category || null  // ‚úÖ ADICIONAR category
    };
}

// 4. CORRE√á√ÉO PARA TABELA QUALITY_TESTS
function fixQualityTestInsert(qualityData, user) {
    console.log('üîß Corrigindo opera√ß√£o INSERT para quality_tests...');
    
    return {
        farm_id: qualityData.farm_id,
        user_id: user.id,  // ‚úÖ ADICIONAR user_id
        test_date: qualityData.test_date,
        fat_percentage: qualityData.fat_percentage,
        protein_percentage: qualityData.protein_percentage,
        scc: qualityData.scc,
        cbt: qualityData.cbt,
        laboratory: qualityData.laboratory,
        observations: qualityData.notes || qualityData.observations || null,  // ‚úÖ CORRIGIR: notes ‚Üí observations
        quality_score: qualityData.quality_score || null  // ‚úÖ ADICIONAR quality_score
    };
}

// 5. CORRE√á√ÉO PARA TABELA MILK_PRODUCTION (j√° est√° correto, mas para garantir)
function fixMilkProductionInsert(volumeData, user) {
    console.log('üîß Verificando opera√ß√£o INSERT para milk_production...');
    
    return {
        farm_id: volumeData.farm_id,
        user_id: user.id,
        production_date: volumeData.production_date,
        shift: volumeData.shift,
        volume_liters: volumeData.volume,
        temperature: volumeData.temperature,
        observations: volumeData.observations
    };
}

// 6. CORRE√á√ÉO PARA TABELA USERS (j√° est√° correto, mas para garantir)
function fixUserUpdate(userData) {
    console.log('üîß Verificando opera√ß√£o UPDATE para users...');
    
    return {
        name: userData.name,
        email: userData.email,
        role: userData.role,
        whatsapp: userData.whatsapp || null,
        profile_photo_url: userData.profile_photo_url || null,
        report_farm_name: userData.report_farm_name || null,
        report_farm_logo_base64: userData.report_farm_logo_base64 || null,
        report_footer_text: userData.report_footer_text || null,
        report_system_logo_base64: userData.report_system_logo_base64 || null,
        is_active: userData.is_active !== undefined ? userData.is_active : true
    };
}

// 7. FUN√á√ïES DE OPERA√á√ÉO SEGURA
async function safeAnimalInsert(animalData) {
    try {
        const { data: { user } } = await supabase.auth.getUser();
        if (!user) throw new Error('Usu√°rio n√£o autenticado');
        
        const correctedData = fixAnimalInsert(animalData, user);
        
        const { data, error } = await supabase
            .from('animals')
            .insert(correctedData)
            .select()
            .single();
        
        if (error) throw error;
        
        console.log('‚úÖ Animal inserido com sucesso:', data);
        return { success: true, data };
        
    } catch (error) {
        console.error('‚ùå Erro ao inserir animal:', error);
        return { success: false, error: error.message };
    }
}

async function safeAnimalHealthRecordInsert(recordData) {
    try {
        const { data: { user } } = await supabase.auth.getUser();
        if (!user) throw new Error('Usu√°rio n√£o autenticado');
        
        const correctedData = fixAnimalHealthRecordInsert(recordData, user);
        
        const { data, error } = await supabase
            .from('animal_health_records')
            .insert(correctedData)
            .select()
            .single();
        
        if (error) throw error;
        
        console.log('‚úÖ Registro de sa√∫de inserido com sucesso:', data);
        return { success: true, data };
        
    } catch (error) {
        console.error('‚ùå Erro ao inserir registro de sa√∫de:', error);
        return { success: false, error: error.message };
    }
}

async function safeFinancialRecordInsert(recordData) {
    try {
        const { data: { user } } = await supabase.auth.getUser();
        if (!user) throw new Error('Usu√°rio n√£o autenticado');
        
        const correctedData = fixFinancialRecordInsert(recordData, user);
        
        const { data, error } = await supabase
            .from('financial_records')
            .insert(correctedData)
            .select()
            .single();
        
        if (error) throw error;
        
        console.log('‚úÖ Registro financeiro inserido com sucesso:', data);
        return { success: true, data };
        
    } catch (error) {
        console.error('‚ùå Erro ao inserir registro financeiro:', error);
        return { success: false, error: error.message };
    }
}

async function safeQualityTestInsert(qualityData) {
    try {
        const { data: { user } } = await supabase.auth.getUser();
        if (!user) throw new Error('Usu√°rio n√£o autenticado');
        
        const correctedData = fixQualityTestInsert(qualityData, user);
        
        const { data, error } = await supabase
            .from('quality_tests')
            .insert(correctedData)
            .select()
            .single();
        
        if (error) throw error;
        
        console.log('‚úÖ Teste de qualidade inserido com sucesso:', data);
        return { success: true, data };
        
    } catch (error) {
        console.error('‚ùå Erro ao inserir teste de qualidade:', error);
        return { success: false, error: error.message };
    }
}

async function safeMilkProductionInsert(volumeData) {
    try {
        const { data: { user } } = await supabase.auth.getUser();
        if (!user) throw new Error('Usu√°rio n√£o autenticado');
        
        const correctedData = fixMilkProductionInsert(volumeData, user);
        
        const { data, error } = await supabase
            .from('milk_production')
            .insert(correctedData)
            .select()
            .single();
        
        if (error) throw error;
        
        console.log('‚úÖ Produ√ß√£o de leite inserida com sucesso:', data);
        return { success: true, data };
        
    } catch (error) {
        console.error('‚ùå Erro ao inserir produ√ß√£o de leite:', error);
        return { success: false, error: error.message };
    }
}

// 8. SUBSTITUIR FUN√á√ïES ORIGINAIS
function replaceOriginalFunctions() {
    console.log('üîß Substituindo fun√ß√µes originais...');
    
    // Substituir fun√ß√£o addAnimal se existir
    if (typeof window.addAnimal === 'function') {
        const originalAddAnimal = window.addAnimal;
        window.addAnimal = async function(animalData) {
            console.log('üîß Usando vers√£o corrigida de addAnimal');
            return await safeAnimalInsert(animalData);
        };
        console.log('‚úÖ Fun√ß√£o addAnimal substitu√≠da');
    }
    
    // Substituir fun√ß√£o addAnimalHealthRecord se existir
    if (typeof window.addAnimalHealthRecord === 'function') {
        const originalAddAnimalHealthRecord = window.addAnimalHealthRecord;
        window.addAnimalHealthRecord = async function(recordData) {
            console.log('üîß Usando vers√£o corrigida de addAnimalHealthRecord');
            return await safeAnimalHealthRecordInsert(recordData);
        };
        console.log('‚úÖ Fun√ß√£o addAnimalHealthRecord substitu√≠da');
    }
    
    // Substituir fun√ß√£o addFinancialRecord se existir
    if (typeof window.addFinancialRecord === 'function') {
        const originalAddFinancialRecord = window.addFinancialRecord;
        window.addFinancialRecord = async function(recordData) {
            console.log('üîß Usando vers√£o corrigida de addFinancialRecord');
            return await safeFinancialRecordInsert(recordData);
        };
        console.log('‚úÖ Fun√ß√£o addFinancialRecord substitu√≠da');
    }
    
    // Substituir fun√ß√£o addQualityTest se existir
    if (typeof window.addQualityTest === 'function') {
        const originalAddQualityTest = window.addQualityTest;
        window.addQualityTest = async function(qualityData) {
            console.log('üîß Usando vers√£o corrigida de addQualityTest');
            return await safeQualityTestInsert(qualityData);
        };
        console.log('‚úÖ Fun√ß√£o addQualityTest substitu√≠da');
    }
    
    // Substituir fun√ß√£o addMilkProduction se existir
    if (typeof window.addMilkProduction === 'function') {
        const originalAddMilkProduction = window.addMilkProduction;
        window.addMilkProduction = async function(volumeData) {
            console.log('üîß Usando vers√£o corrigida de addMilkProduction');
            return await safeMilkProductionInsert(volumeData);
        };
        console.log('‚úÖ Fun√ß√£o addMilkProduction substitu√≠da');
    }
}

// 9. CORRE√á√ÉO AUTOM√ÅTICA DE OPERA√á√ïES EXISTENTES
function fixExistingOperations() {
    console.log('üîß Corrigindo opera√ß√µes existentes...');
    
    // Interceptar opera√ß√µes de INSERT no Supabase
    const originalInsert = supabase.from;
    supabase.from = function(tableName) {
        const table = originalInsert.call(this, tableName);
        
        const originalTableInsert = table.insert;
        table.insert = function(data) {
            console.log(`üîß Interceptando INSERT em ${tableName}:`, data);
            
            let correctedData = data;
            
            // Corrigir dados baseado na tabela
            if (tableName === 'animals') {
                correctedData = fixAnimalInsert(data, { id: 'current-user-id' });
            } else if (tableName === 'animal_health_records') {
                correctedData = fixAnimalHealthRecordInsert(data, { id: 'current-user-id' });
            } else if (tableName === 'financial_records') {
                correctedData = fixFinancialRecordInsert(data, { id: 'current-user-id' });
            } else if (tableName === 'quality_tests') {
                correctedData = fixQualityTestInsert(data, { id: 'current-user-id' });
            } else if (tableName === 'milk_production') {
                correctedData = fixMilkProductionInsert(data, { id: 'current-user-id' });
            }
            
            console.log(`‚úÖ Dados corrigidos para ${tableName}:`, correctedData);
            return originalTableInsert.call(this, correctedData);
        };
        
        return table;
    };
    
    console.log('‚úÖ Intercepta√ß√£o de opera√ß√µes configurada');
}

// 10. FUN√á√ÉO PRINCIPAL DE CORRE√á√ÉO
function fixAllDatabaseOperations() {
    console.log('üöÄ Iniciando corre√ß√£o de todas as opera√ß√µes de banco...');
    
    try {
        replaceOriginalFunctions();
        fixExistingOperations();
        
        console.log('‚úÖ Todas as opera√ß√µes de banco corrigidas!');
        
        // Verificar se h√° opera√ß√µes problem√°ticas
        setTimeout(() => {
            console.log('üîç Verificando se h√° opera√ß√µes restantes...');
            const problematicOperations = [
                'identification',
                'notes',
                'veterinarian_id',
                'date',
                'diagnosis',
                'symptoms',
                'severity',
                'status'
            ];
            
            console.log('‚ö†Ô∏è Colunas problem√°ticas que devem ser evitadas:', problematicOperations);
            console.log('‚úÖ Use as fun√ß√µes seguras: safeAnimalInsert, safeQualityTestInsert, etc.');
            
        }, 2000);
        
    } catch (error) {
        console.error('‚ùå Erro durante corre√ß√£o de opera√ß√µes:', error);
    }
}

// 11. EXPORTAR FUN√á√ïES PARA USO GLOBAL
window.fixAllDatabaseOperations = fixAllDatabaseOperations;
window.safeAnimalInsert = safeAnimalInsert;
window.safeAnimalHealthRecordInsert = safeAnimalHealthRecordInsert;
window.safeFinancialRecordInsert = safeFinancialRecordInsert;
window.safeQualityTestInsert = safeQualityTestInsert;
window.safeMilkProductionInsert = safeMilkProductionInsert;
window.fixAnimalInsert = fixAnimalInsert;
window.fixAnimalHealthRecordInsert = fixAnimalHealthRecordInsert;
window.fixFinancialRecordInsert = fixFinancialRecordInsert;
window.fixQualityTestInsert = fixQualityTestInsert;
window.fixMilkProductionInsert = fixMilkProductionInsert;
window.fixUserUpdate = fixUserUpdate;

// 12. EXECUTAR AUTOMATICAMENTE
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', fixAllDatabaseOperations);
} else {
    fixAllDatabaseOperations();
}

console.log('üîß Script de corre√ß√£o de opera√ß√µes de banco carregado!');
console.log('Fun√ß√µes dispon√≠veis:');
console.log('- fixAllDatabaseOperations()');
console.log('- safeAnimalInsert(animalData)');
console.log('- safeAnimalHealthRecordInsert(recordData)');
console.log('- safeFinancialRecordInsert(recordData)');
console.log('- safeQualityTestInsert(qualityData)');
console.log('- safeMilkProductionInsert(volumeData)');
console.log('- fixAnimalInsert(animalData, user)');
console.log('- fixAnimalHealthRecordInsert(recordData, user)');
console.log('- fixFinancialRecordInsert(recordData, user)');
console.log('- fixQualityTestInsert(qualityData, user)');
console.log('- fixMilkProductionInsert(volumeData, user)');
console.log('- fixUserUpdate(userData)');
