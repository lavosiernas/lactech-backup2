// Script de Teste para o Sistema de Chat
// Execute este script no console do navegador para testar

console.log('üß™ Iniciando testes do sistema de chat...');

// Teste 1: Verificar se os clientes est√£o configurados
async function testDatabaseClients() {
    console.log('üìä Testando clientes de banco...');
    
    try {
        // Testar cliente do sistema
        const systemClient = await getSupabaseClient();
        console.log('‚úÖ Cliente do sistema:', systemClient ? 'OK' : 'ERRO');
        
        // Testar cliente do chat
        const chatClient = await getChatClient();
        console.log('‚úÖ Cliente do chat:', chatClient ? 'OK' : 'ERRO');
        
        return true;
    } catch (error) {
        console.error('‚ùå Erro nos clientes:', error);
        return false;
    }
}

// Teste 2: Verificar autentica√ß√£o
async function testAuthentication() {
    console.log('üîê Testando autentica√ß√£o...');
    
    try {
        const supabase = await getSupabaseClient();
        const { data: { user }, error } = await supabase.auth.getUser();
        
        if (error) {
            console.error('‚ùå Erro de autentica√ß√£o:', error);
            return false;
        }
        
        if (!user) {
            console.error('‚ùå Usu√°rio n√£o autenticado');
            return false;
        }
        
        console.log('‚úÖ Usu√°rio autenticado:', user.email);
        return true;
    } catch (error) {
        console.error('‚ùå Erro no teste de autentica√ß√£o:', error);
        return false;
    }
}

// Teste 3: Verificar sincroniza√ß√£o de usu√°rios
async function testUserSync() {
    console.log('üë• Testando sincroniza√ß√£o de usu√°rios...');
    
    try {
        const supabase = await getSupabaseClient();
        const { data: { user } } = await supabase.auth.getUser();
        
        if (!user) {
            console.error('‚ùå Usu√°rio n√£o autenticado');
            return false;
        }
        
        // Buscar farm_id
        const { data: userData } = await supabase
            .from('users')
            .select('farm_id')
            .eq('id', user.id)
            .single();
        
        if (!userData?.farm_id) {
            console.error('‚ùå Farm ID n√£o encontrado');
            return false;
        }
        
        // Testar sincroniza√ß√£o
        const employees = await getFarmUsers(userData.farm_id);
        console.log('‚úÖ Usu√°rios sincronizados:', employees.length);
        
        return true;
    } catch (error) {
        console.error('‚ùå Erro na sincroniza√ß√£o:', error);
        return false;
    }
}

// Teste 4: Verificar envio de mensagem
async function testMessageSending() {
    console.log('üí¨ Testando envio de mensagem...');
    
    try {
        const supabase = await getSupabaseClient();
        const { data: { user } } = await supabase.auth.getUser();
        
        if (!user) {
            console.error('‚ùå Usu√°rio n√£o autenticado');
            return false;
        }
        
        // Buscar farm_id
        const { data: userData } = await supabase
            .from('users')
            .select('farm_id')
            .eq('id', user.id)
            .single();
        
        if (!userData?.farm_id) {
            console.error('‚ùå Farm ID n√£o encontrado');
            return false;
        }
        
        // Buscar outro usu√°rio para testar
        const employees = await getFarmUsers(userData.farm_id);
        const otherUser = employees.find(emp => emp.id !== user.id);
        
        if (!otherUser) {
            console.log('‚ö†Ô∏è Nenhum outro usu√°rio encontrado para teste');
            return true;
        }
        
        // Testar envio de mensagem
        const testMessage = {
            farm_id: userData.farm_id,
            sender_id: user.id,
            receiver_id: otherUser.id,
            message: 'Mensagem de teste - ' + new Date().toISOString()
        };
        
        await sendChatMessage(testMessage);
        console.log('‚úÖ Mensagem de teste enviada');
        
        return true;
    } catch (error) {
        console.error('‚ùå Erro no envio de mensagem:', error);
        return false;
    }
}

// Teste 5: Verificar busca de mensagens
async function testMessageRetrieval() {
    console.log('üì® Testando busca de mensagens...');
    
    try {
        const supabase = await getSupabaseClient();
        const { data: { user } } = await supabase.auth.getUser();
        
        if (!user) {
            console.error('‚ùå Usu√°rio n√£o autenticado');
            return false;
        }
        
        // Buscar farm_id
        const { data: userData } = await supabase
            .from('users')
            .select('farm_id')
            .eq('id', user.id)
            .single();
        
        if (!userData?.farm_id) {
            console.error('‚ùå Farm ID n√£o encontrado');
            return false;
        }
        
        // Buscar mensagens
        const messages = await getChatMessages(userData.farm_id, user.id);
        console.log('‚úÖ Mensagens encontradas:', messages.length);
        
        return true;
    } catch (error) {
        console.error('‚ùå Erro na busca de mensagens:', error);
        return false;
    }
}

// Executar todos os testes
async function runAllTests() {
    console.log('üöÄ Executando todos os testes...');
    
    const results = {
        databaseClients: await testDatabaseClients(),
        authentication: await testAuthentication(),
        userSync: await testUserSync(),
        messageSending: await testMessageSending(),
        messageRetrieval: await testMessageRetrieval()
    };
    
    console.log('üìã Resultados dos testes:');
    console.table(results);
    
    const allPassed = Object.values(results).every(result => result === true);
    
    if (allPassed) {
        console.log('üéâ Todos os testes passaram! Sistema de chat funcionando corretamente.');
    } else {
        console.log('‚ö†Ô∏è Alguns testes falharam. Verifique os erros acima.');
    }
    
    return results;
}

// Fun√ß√£o para testar o modal do chat
function testChatModal() {
    console.log('üñ•Ô∏è Testando modal do chat...');
    
    // Verificar se o modal existe
    const modal = document.getElementById('chatModal');
    if (!modal) {
        console.error('‚ùå Modal do chat n√£o encontrado');
        return false;
    }
    
    console.log('‚úÖ Modal do chat encontrado');
    
    // Verificar se as fun√ß√µes existem
    const functions = [
        'openChatModal',
        'closeChatModal',
        'loadEmployees',
        'sendChatMessageLocal',
        'displayChatMessages'
    ];
    
    functions.forEach(funcName => {
        if (typeof window[funcName] === 'function') {
            console.log(`‚úÖ Fun√ß√£o ${funcName} encontrada`);
        } else {
            console.error(`‚ùå Fun√ß√£o ${funcName} n√£o encontrada`);
        }
    });
    
    return true;
}

// Exportar fun√ß√µes para uso manual
window.testChatSystem = {
    runAllTests,
    testDatabaseClients,
    testAuthentication,
    testUserSync,
    testMessageSending,
    testMessageRetrieval,
    testChatModal
};

console.log('‚úÖ Script de teste carregado! Use testChatSystem.runAllTests() para executar todos os testes.');
