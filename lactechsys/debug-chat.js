// Script de Debug para o Chat
// Execute no console do navegador para diagnosticar problemas

console.log('üîç Iniciando debug do chat...');

// Fun√ß√£o para testar o modal do chat
async function debugChatModal() {
    console.log('üñ•Ô∏è Testando modal do chat...');
    
    // Verificar se o modal existe
    const modal = document.getElementById('chatModal');
    if (!modal) {
        console.error('‚ùå Modal do chat n√£o encontrado');
        return false;
    }
    
    console.log('‚úÖ Modal do chat encontrado');
    
    // Verificar elementos internos
    const elements = [
        'employeesList',
        'onlineEmployees',
        'chatMessages',
        'chatMessageInput',
        'sendMessageBtn'
    ];
    
    elements.forEach(elementId => {
        const element = document.getElementById(elementId);
        if (element) {
            console.log(`‚úÖ Elemento ${elementId} encontrado`);
        } else {
            console.error(`‚ùå Elemento ${elementId} n√£o encontrado`);
        }
    });
    
    return true;
}

// Fun√ß√£o para testar as fun√ß√µes do chat
function debugChatFunctions() {
    console.log('üîß Testando fun√ß√µes do chat...');
    
    const functions = [
        'openChatModal',
        'closeChatModal',
        'loadEmployees',
        'displayEmployees',
        'selectEmployee',
        'loadChatMessages',
        'displayChatMessages',
        'sendChatMessageLocal',
        'handleChatKeyPress',
        'searchEmployees',
        'toggleChatSidebar'
    ];
    
    functions.forEach(funcName => {
        if (typeof window[funcName] === 'function') {
            console.log(`‚úÖ Fun√ß√£o ${funcName} encontrada`);
        } else {
            console.error(`‚ùå Fun√ß√£o ${funcName} n√£o encontrada`);
        }
    });
}

// Fun√ß√£o para testar a autentica√ß√£o
async function debugAuthentication() {
    console.log('üîê Testando autentica√ß√£o...');
    
    try {
        const supabase = await getSupabaseClient();
        const { data: { user }, error } = await supabase.auth.getUser();
        
        if (error) {
            console.error('‚ùå Erro de autentica√ß√£o:', error);
            return false;
        }
        
        if (!user) {
            console.error('‚ùå Usu√°rio n√£o autenticado');
            return false;
        }
        
        console.log('‚úÖ Usu√°rio autenticado:', user.email);
        console.log('üÜî User ID:', user.id);
        
        return true;
    } catch (error) {
        console.error('‚ùå Erro no teste de autentica√ß√£o:', error);
        return false;
    }
}

// Fun√ß√£o para testar busca de farm_id
async function debugFarmId() {
    console.log('üè¢ Testando busca de farm_id...');
    
    try {
        const supabase = await getSupabaseClient();
        const { data: { user } } = await supabase.auth.getUser();
        
        if (!user) {
            console.error('‚ùå Usu√°rio n√£o autenticado');
            return false;
        }
        
        const { data: userData, error: userError } = await supabase
            .from('users')
            .select('farm_id')
            .eq('id', user.id)
            .single();
        
        if (userError) {
            console.error('‚ùå Erro ao buscar farm_id:', userError);
            return false;
        }
        
        if (!userData?.farm_id) {
            console.error('‚ùå Farm ID n√£o encontrado');
            return false;
        }
        
        console.log('‚úÖ Farm ID encontrado:', userData.farm_id);
        return true;
    } catch (error) {
        console.error('‚ùå Erro no teste de farm_id:', error);
        return false;
    }
}

// Fun√ß√£o para testar sincroniza√ß√£o de usu√°rios
async function debugUserSync() {
    console.log('üë• Testando sincroniza√ß√£o de usu√°rios...');
    
    try {
        const supabase = await getSupabaseClient();
        const { data: { user } } = await supabase.auth.getUser();
        
        if (!user) {
            console.error('‚ùå Usu√°rio n√£o autenticado');
            return false;
        }
        
        const { data: userData } = await supabase
            .from('users')
            .select('farm_id')
            .eq('id', user.id)
            .single();
        
        if (!userData?.farm_id) {
            console.error('‚ùå Farm ID n√£o encontrado');
            return false;
        }
        
        console.log('üîÑ Buscando usu√°rios da fazenda...');
        const employees = await getFarmUsers(userData.farm_id);
        console.log('‚úÖ Usu√°rios encontrados:', employees.length);
        
        employees.forEach((emp, index) => {
            console.log(`üë§ ${index + 1}. ${emp.name} (${emp.role}) - ${emp.email}`);
        });
        
        return true;
    } catch (error) {
        console.error('‚ùå Erro na sincroniza√ß√£o:', error);
        return false;
    }
}

// Fun√ß√£o para testar abertura do modal
async function debugOpenModal() {
    console.log('üö™ Testando abertura do modal...');
    
    try {
        // Verificar se a fun√ß√£o existe
        if (typeof openChatModal !== 'function') {
            console.error('‚ùå Fun√ß√£o openChatModal n√£o encontrada');
            return false;
        }
        
        // Tentar abrir o modal
        openChatModal();
        console.log('‚úÖ Modal aberto com sucesso');
        
        // Verificar se o modal est√° vis√≠vel
        const modal = document.getElementById('chatModal');
        if (modal && !modal.classList.contains('hidden')) {
            console.log('‚úÖ Modal est√° vis√≠vel');
        } else {
            console.error('‚ùå Modal n√£o est√° vis√≠vel');
        }
        
        return true;
    } catch (error) {
        console.error('‚ùå Erro ao abrir modal:', error);
        return false;
    }
}

// Fun√ß√£o para testar carregamento de funcion√°rios
async function debugLoadEmployees() {
    console.log('üë• Testando carregamento de funcion√°rios...');
    
    try {
        // Verificar se a fun√ß√£o existe
        if (typeof loadEmployees !== 'function') {
            console.error('‚ùå Fun√ß√£o loadEmployees n√£o encontrada');
            return false;
        }
        
        // Tentar carregar funcion√°rios
        await loadEmployees();
        console.log('‚úÖ Fun√ß√£o loadEmployees executada');
        
        // Verificar se h√° funcion√°rios na lista
        const employeesList = document.getElementById('employeesList');
        if (employeesList) {
            const employeeItems = employeesList.querySelectorAll('div');
            console.log(`üìä Funcion√°rios na lista: ${employeeItems.length}`);
        }
        
        return true;
    } catch (error) {
        console.error('‚ùå Erro ao carregar funcion√°rios:', error);
        return false;
    }
}

// Executar todos os testes de debug
async function runChatDebug() {
    console.log('üöÄ Executando debug completo do chat...');
    
    const results = {
        modal: await debugChatModal(),
        functions: debugChatFunctions(),
        authentication: await debugAuthentication(),
        farmId: await debugFarmId(),
        userSync: await debugUserSync(),
        openModal: await debugOpenModal(),
        loadEmployees: await debugLoadEmployees()
    };
    
    console.log('üìã Resultados do debug:');
    console.table(results);
    
    const allPassed = Object.values(results).every(result => result === true);
    
    if (allPassed) {
        console.log('üéâ Todos os testes de debug passaram!');
    } else {
        console.log('‚ö†Ô∏è Alguns testes falharam. Verifique os erros acima.');
    }
    
    return results;
}

// Exportar fun√ß√µes para uso manual
window.chatDebug = {
    runChatDebug,
    debugChatModal,
    debugChatFunctions,
    debugAuthentication,
    debugFarmId,
    debugUserSync,
    debugOpenModal,
    debugLoadEmployees
};

console.log('‚úÖ Script de debug carregado! Use chatDebug.runChatDebug() para executar todos os testes.');
