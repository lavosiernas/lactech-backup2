// =====================================================
// CORRE√á√ÉO DEFINITIVA DO MODAL AUTOM√ÅTICO
// =====================================================

(function() {
    'use strict';
    
    console.log('üõ°Ô∏è Iniciando prote√ß√£o contra modal autom√°tico...');
    
    // Fun√ß√£o para fechar modal de exclus√£o
    function closeDeleteModal() {
        const deleteModal = document.getElementById('deleteUserModal');
        if (deleteModal && !deleteModal.classList.contains('hidden')) {
            deleteModal.classList.add('hidden');
            console.log('‚úÖ Modal de exclus√£o fechado');
        }
        
        // Limpar vari√°vel userToDelete
        if (typeof userToDelete !== 'undefined') {
            userToDelete = null;
        }
    }
    
    // Fun√ß√£o para verificar se o modal foi aberto legitimamente
    function isModalLegitimatelyOpened() {
        return userToDelete && userToDelete.id && userToDelete.name;
    }
    
    // Fechar modal imediatamente se estiver aberto
    closeDeleteModal();
    
    // Prote√ß√£o contra abertura autom√°tica
    let modalOpenTime = null;
    const originalRemoveHidden = Element.prototype.remove;
    
    // Interceptar remo√ß√£o da classe 'hidden' do modal
    Element.prototype.remove = function(className) {
        if (this.id === 'deleteUserModal' && className === 'hidden') {
            // Verificar se foi aberto legitimamente
            if (!isModalLegitimatelyOpened()) {
                console.log('‚ö†Ô∏è Tentativa de abertura n√£o autorizada do modal, bloqueando...');
                return;
            }
            modalOpenTime = Date.now();
        }
        return originalRemoveHidden.call(this, className);
    };
    
    // Listener para ESC
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            closeDeleteModal();
        }
    });
    
    // Interceptar erros JavaScript
    window.addEventListener('error', function(event) {
        console.log('Erro JavaScript detectado:', event.error);
        closeDeleteModal();
    });
    
    // Interceptar promises rejeitadas
    window.addEventListener('unhandledrejection', function(event) {
        console.log('Promise rejeitada detectada:', event.reason);
        closeDeleteModal();
    });
    
    // Verifica√ß√£o peri√≥dica
    setInterval(function() {
        const deleteModal = document.getElementById('deleteUserModal');
        if (deleteModal && !deleteModal.classList.contains('hidden')) {
            // Se o modal est√° aberto h√° mais de 5 segundos sem a√ß√£o leg√≠tima
            if (modalOpenTime && (Date.now() - modalOpenTime > 5000) && !isModalLegitimatelyOpened()) {
                console.log('‚ö†Ô∏è Modal aberto por muito tempo sem a√ß√£o, fechando...');
                closeDeleteModal();
                modalOpenTime = null;
            }
        }
    }, 1000);
    
    // Prote√ß√£o adicional no carregamento da p√°gina
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', closeDeleteModal);
    } else {
        closeDeleteModal();
    }
    
    // Prote√ß√£o no evento load
    window.addEventListener('load', closeDeleteModal);
    
    console.log('‚úÖ Prote√ß√£o contra modal autom√°tico ativada com sucesso');
    
    // Expor fun√ß√£o para uso manual se necess√°rio
    window.fixModalIssue = closeDeleteModal;
    
})();
